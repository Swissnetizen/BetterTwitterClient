{"ts":1352569563456,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\nCopyright Â© 2012, GlitchTech Science\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n\tRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\tRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n * GTS.gapi\n *\n * Helper kind for using Google API (gapi). Handles authentication and loading modules.\n *\n * @author Matthew Schott <glitchtechscience@gmail.com>\n *\n * @requires Enyo (https://github.com/enyojs/enyo)\n * @requires Phonegap-ChildBrowsers (if used on a mobile device)\n */\nenyo.kind({\n\tname: \"GTS.Gapi\",\n\n\tnextSteps: {},\n\n\t/** @public */\n\tpublished: {\n\t\t/** @lends GTS.Gapi# */\n\n\t\t/**\n\t\t * Most Google APIs require an API key. You can sign up for an API key at the Google APIs Console (https://code.google.com/apis/console/).\n\t\t * @type string\n\t\t * @default \"\"\n\t\t */\n\t\tapiKey: \"\",\n\n\t\t/**\n\t\t * API Client ID. This is obtained during application registration\n\t\t * @type string\n\t\t * @default \"\"\n\t\t */\n\t\tclientId: \"\",\n\n\t\t/**\n\t\t * API Client Secret. This is obtained during application registration\n\t\t * @type string\n\t\t * @default \"\"\n\t\t */\n\t\tclientSecret: \"\",\n\n\t\t/**\n\t\t * Scope for current authentication\n\t\t * @type [string]\n\t\t * @default []\n\t\t */\n\t\tscope: [],\n\n\t\t/**\n\t\t * GAPI Auth Settings. Not advisible to modify\n\t\t * @type {}\n\t\t */\n\t\tgapiConfig: {\n\n\t\t\tendpoint: \"https://accounts.google.com/o/oauth2/auth\",\n\t\t\tendtoken: \"https://accounts.google.com/o/oauth2/token\", // token endpoint\n\n\t\t\tresponse_type: \"code\",\n\n\t\t\tredirect_uri: \"http://localhost\",\n\n\t\t\t/* stores access Token's Expiry Limit. Uses 58 min. instead of 60 min. */\n\t\t\taccessTokenExpireLimit: ( 58 * 60 * 1000 ),\n\n\t\t\t/* As defined in the OAuth 2.0 specification, this field must contain a value\n\t\t\t * of \"authorization_code\" or \"refresh_token\" */\n\t\t\tgrantTypes: { AUTHORIZE: \"authorization_code\", REFRESH: \"refresh_token\" },\n\n\t\t\taccess_type: \"offline\",\n\n\t\t\t// ## Not required to be updated: only used for echoing ##\n\t\t\tstate: \"lligtaskinit\"\n\t\t}\n\t},\n\n\t/**\n\t * @public\n\t * Events sent by control\n\t */\n\tevents: {\n\t\t/** @lends GTS.Gapi# */\n\n\t\t/**\n\t\t * Base library loaded\n\t\t * @event\n\t\t * @param {Object} inSender\tEvent's sender\n\t\t * @param {Object} inEvent\tEvent parameters\n\t\t */\n\t\tonReady: \"\"\n\t},\n\n\t/**\n\t * @protected\n\t * @constructs\n\t */\n\tconstructor: function() {\n\n\t\t// Run our default construction\n\t\tthis.inherited( arguments );\n\n\t\tthis._binds = {\n\t\t\t\t\"_cbUrlChanged\": enyo.bind( this, this.cbUrlChanged ),\n\t\t\t\t\"_handleAuthResult\": enyo.bind( this, this.handleAuthResult )\n\t\t\t};\n\t},\n\n\t/**\n\t * @protected\n\t * @function\n\t * @name GTS.Gapi#create\n\t *\n\t * Called by Enyo when created. Loaded base Google API if needed.\n\t */\n\tcreate: function() {\n\n\t\tthis.inherited( arguments );\n\n\t\tif( !this.isGapiReady() ) {\n\n\t\t\tthis.loadGapi();\n\t\t} else {\n\n\t\t\tthis.doReady();\n\t\t\tthis.apiKeyChanged();\n\t\t}\n\t},\n\n\t/**\n\t * @public\n\t * @function\n\t * @name GTS.Gapi#isGapiReady\n\t *\n\t * Checks if gapi is ready\n\t *\n\t * @return boolean\n\t */\n\tisGapiReady: function() {\n\n\t\treturn !( typeof( gapi ) === 'undefined' );\n\t},\n\n\t/**\n\t * @private\n\t * @function\n\t * @name GTS.Gapi#loadGapi\n\t *\n\t * Fetch gapi\n\t */\n\tloadGapi: function() {\n\n\t\tnew enyo.JsonpRequest( {\n\t\t\t\turl: \"https://apis.google.com/js/client.js\",\n\t\t\t\tcallbackName: \"onload\"\n\t\t\t})\n\t\t\t.go()\n\t\t\t.response( this, \"gapiLoaded\" );\n\t},\n\n\t/**\n\t * @private\n\t * @function\n\t * @name GTS.Gapi#gapiLoaded\n\t *\n\t * Handler for loading gapi\n\t */\n\tgapiLoaded: function() {\n\n\t\tif( this.apiKey != \"\" ) {\n\n\t\t\tthis.apiKeyChanged();\n\t\t}\n\n\t\tthis.doReady();\n\t},\n\n\t/**\n\t * @private\n\t * @function\n\t * @name GTS.Gapi#apiKeyChanged\n\t *\n\t * Called by Enyo when this.apiKey is changed by host.\n\t */\n\tapiKeyChanged: function() {\n\n\t\tgapi.client.setApiKey( this.apiKey );\n\t},\n\n\t/**\n\t * @public\n\t * @function\n\t * @name GTS.Gapi#getAuthToken\n\t *\n\t * Fetchs the oauth token from the api (if set)\n\t *\n\t * @return {token obj}\n\t */\n\tgetAuthToken: function() {\n\n\t\treturn gapi.auth.getToken();\n\t},\n\n\t/**\n\t * @public\n\t * @function\n\t * @name GTS.Gapi#setAuthToken\n\t *\n\t * Sets the oauth token\n\t *\n\t * @param {obj} token\tOAuth token\n\t * @param {string}\ttoken.access_token  The OAuth 2.0 token. Only present in successful responses.\n\t * @param {string}\ttoken.error         Details about the error. Only present in error responses.\n\t * @param {string}\ttoken.expires_in    The duration, in seconds, the token is valid for. Only present in successful responses.\n\t * @param {string}\ttoken.state         The Google API scopes related to this token.\n\t */\n\tsetAuthToken: function( token ) {\n\n\t\treturn gapi.auth.setToken( token );\n\t},\n\n\t/**\n\t * @public\n\t * @function\n\t * @name GTS.Gapi#auth\n\t *\n\t * Authorize with OAuth2. Refreshes the token if set\n\t *\n\t * @param {object} [options]\tCallback functions\n\t * @param {function [options.onSuccess]\texecute once authorization obtained\n\t * @param {function} [options.onError]\texecute if an error occurs\n\t */\n\tauth: function( options ) {\n\n\t\tthis.nextSteps = options;\n\n\t\tif( window.device && window.plugins.childBrowser ) {\n\t\t\t//Use custom authentication system\n\n\t\t\tvar accessToken = this.getAuthToken();\n\n\t\t\tif( /* DISABLED PATH */ 1 == 2 /* DISABLED PATH */ && accessToken && accessToken['access_token'] ) {\n\t\t\t\t//Phonegap method doesn't like to restore token from memory\n\n\t\t\t\tthis.log( \"Phonegap token refresh\" );\n\n\t\t\t\tthis.getAuthToken( options );\n\t\t\t} else {\n\n\t\t\t\tthis.log( \"Phonegap-ChildBrowsers Auth\" );\n\n\t\t\t\tvar authArgs = {\n\t\t\t\t\t\t\"client_id\": encodeURIComponent( this.clientId ),\n\t\t\t\t\t\t\"scope\": encodeURIComponent( this.scope.join( \" \" ) ),\n\n\t\t\t\t\t\t\"redirect_uri\": encodeURIComponent( this.gapiConfig['redirect_uri'] ),\n\t\t\t\t\t\t\"response_type\": encodeURIComponent( this.gapiConfig['response_type'] ),\n\t\t\t\t\t\t\"state\": encodeURIComponent( this.gapiConfig['state'] ),\n\t\t\t\t\t\t\"access_type\": encodeURIComponent( this.gapiConfig['access_type'] ),\n\t\t\t\t\t\t\"approval_prompt\": \"force\"\n\t\t\t\t\t};\n\n\t\t\t\tvar authUri = this.gapiConfig['endpoint'] + \"?\" + Object.keys( authArgs ).map( function( x ) { return( x + \"=\" + authArgs[x] ); } ).join( \"&\" );\n\n\t\t\t\t// Now open new browser\n\t\t\t\twindow.plugins.childBrowser.onClose = function() {};\n\t\t\t\twindow.plugins.childBrowser.onLocationChange = this._binds['_cbUrlChanged'];\n\n\t\t\t\twindow.plugins.childBrowser.showWebPage( authUri, { \"showLocationBar\": false } );\n\t\t\t}\n\t\t} else {\n\t\t\t//This doesn't work in Android/Phonegap, wonder why.\n\n\t\t\tgapi.auth.authorize( { \"client_id\": this.clientId, \"scope\": this.scope.join( \" \" ), \"immediate\": true }, this._binds['_handleAuthResult'] );\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t * @function\n\t * @name GTS.Gapi#getParameterByName\n\t *\n\t * Gets called when the URL changes on OAuth authorization process\n\t *\n\t * @param {string} uriLocation The URI Location\n\t */\n\tcbUrlChanged: function( uriLocation ) {\n\n\t\tif( uriLocation.indexOf( \"code=\" ) != -1 ) {\n\n\t\t\tthis.log( \"Authenticated\" );\n\n\t\t\t/* Store the authCode temporarily */\n\t\t\tvar token = this.getParameterByName( \"code\", uriLocation );\n\n\t\t\tenyo.job( \"refreshFromUrlChange\", enyo.bind( this, this.getRefreshToken, token, this.nextSteps ), 1000 );\n\n\t\t\t// close the childBrowser\n\t\t\twindow.plugins.childBrowser.close();\n\t\t} else if( uriLocation.indexOf( \"error=\" ) != -1 ) {\n\n\t\t\t// close the childBrowser\n\t\t\twindow.plugins.childBrowser.close();\n\n\t\t\tif( enyo.isFunction( this.nextSteps.onError ) ) {\n\n\t\t\t\tthis.nextSteps.onError( this.getParameterByName( \"error\", uriLocation ) );\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\n\t\t\tthis.log( \"Status unknown: \" + uriLocation );\n\t\t}\n   },\n\n   /**\n\t * @private\n\t * @function\n\t * @name GTS.Gapi#getParameterByName\n\t *\n\t * Extracts the code from the url. Copied from online.\n\t *\n\t * @param name The parameter whose value is to be grabbed from url\n\t * @param url  The url to be grabbed from.\n\t *\n\t * @return Returns the Value corresponding to the name passed\n\t */\n   getParameterByName: function( name, url ) {\n\n\t\tname = name.replace( /[\\[]/, \"\\\\\\[\" ).replace( /[\\]]/, \"\\\\\\]\" );\n\n\t\tvar regex = new RegExp( \"[\\\\?&]\" + name + \"=([^&#]*)\" );\n\t\tvar results = regex.exec(url);\n\n\t\tif( results == null ) {\n\n\t\t\treturn false;\n\t\t} else {\n\n\t\t\treturn decodeURIComponent( results[1].replace( /\\+/g, \" \" ) );\n\t\t}\n\t},\n\n\t/**\n\t * @public\n\t * @function\n\t * @name GTS.Gapi#getAccessToken\n\t *\n\t * Retrieve the proper access token.\n\t *\n\t * @param {object} [options]\tCallback functions\n\t * @param {function [options.onSuccess]\texecute once authorization obtained\n\t * @param {function} [options.onError]\texecute if an error occurs\n\t */\n\tgetAccessToken: function( options ) {\n\n\t\tthis.log( \"Update token\" );\n\n\t\tthis.nextSteps = {};\n\n\t\tvar currentTime = ( new Date() ).getTime();\n\n\t\tvar accessToken = this.getAuthToken();\n\n\t\t//Is token still valid?\n\t\tif( accessToken && accessToken['access_token'] && currentTime < ( accessToken['expires_in'] + this.gapiConfig['accessTokenExpireLimit'] ) ) {\n\n\t\t\tif( enyo.isFunction( options.onSuccess ) ) {\n\n\t\t\t\toptions.onSuccess();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.log( \"Fetching fresh token\" );\n\n\t\tvar x = new enyo.Ajax( {\n\t\t\t\t\"url\": this.gapiConfig.endtoken,\n\t\t\t\t\"method\": \"POST\"\n\t\t\t});\n\n\t\tx.go( {\n\t\t\t\t\"client_id\": this.clientId,\n\t\t\t\t\"client_secret\": this.clientSecret,\n\n\t\t\t\t\"refresh_token\": accessToken['access_token'],\n\n\t\t\t\t\"redirect_uri\": this.gapiConfig.redirect_uri,\n\t\t\t\t\"grant_type\": this.gapiConfig.grantTypes.AUTHORIZE\n\t\t\t});\n\n\t\tx.response( this, function( inSender, inResponse ) {\n\n\t\t\t\tthis.log( \"Access complete\" );\n\n\t\t\t\tvar accessToken = {\n\t\t\t\t\t\t\"access_token\": inResponse['access_token']\n\t\t\t\t\t};\n\n\t\t\t\tthis.setAuthToken( accessToken );\n\n\t\t\t\tinResponse['error'] = false;\n\n\t\t\t\tif( enyo.isFunction( options.onSuccess ) ) {\n\n\t\t\t\t\toptions.onSuccess( inResponse );\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\n\t\tx.error( this, function( inSender, inResponse ) {\n\n\t\t\t\tthis.log( \"Access error\" );\n\n\t\t\t\tif( enyo.isFunction( options.onError ) ) {\n\n\t\t\t\t\tinResponse['error'] = true;\n\n\t\t\t\t\toptions.onError( inResponse );\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\t},\n\n\t/**\n\t * @public\n\t * @function\n\t * @name GTS.Gapi#getRefreshToken\n\t *\n\t * Gets the Refresh from Access Token. This method is only called internally,\n\t * and once, only after when authorization of Application happens.\n\t *\n\t * @param {object} [options]\tCallback functions\n\t * @param {function [options.onSuccess]\texecute once authorization obtained\n\t * @param {function} [options.onError]\texecute if an error occurs\n\t */\n\tgetRefreshToken: function( authCode, options ) {\n\n\t\tthis.log( \"Refresh token\" );\n\n\t\tvar x = new enyo.Ajax( {\n\t\t\t\t\"url\": this.gapiConfig.endtoken,\n\t\t\t\t\"method\": \"POST\"\n\t\t\t});\n\n\t\tx.go( {\n\t\t\t\t\"code\": authCode,\n\n\t\t\t\t\"client_id\": this.clientId,\n\t\t\t\t\"client_secret\": this.clientSecret,\n\n\t\t\t\t\"redirect_uri\": this.gapiConfig.redirect_uri,\n\t\t\t\t\"grant_type\": this.gapiConfig.grantTypes.AUTHORIZE\n\t\t\t});\n\n\t\tx.response( this, function( inSender, inResponse ) {\n\n\t\t\t\tthis.log( \"Refresh complete\" );\n\n\t\t\t\tthis.setAuthToken( inResponse );\n\n\t\t\t\tif( enyo.isFunction( options.onSuccess ) ) {\n\n\t\t\t\t\toptions.onSuccess( inResponse );\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\n\t\tx.error( this, function( inSender, inResponse ) {\n\n\t\t\t\tthis.log( \"Refresh error\", enyo.json.stringify( inResponse ) );\n\n\t\t\t\tif( enyo.isFunction( options.onError ) ) {\n\n\t\t\t\t\tinResponse['error'] = true;\n\n\t\t\t\t\toptions.onError( inResponse );\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\t},\n\n\t/**\n\t * @private\n\t * @function\n\t * @name GTS.Gapi#handleAuthResult\n\t *\n\t * Handles response from server\n\t *\n\t * @param {object} authResult\tOAuth results\n\t */\n\thandleAuthResult: function( authResult ) {\n\n\t\tif( this.$['authPop'] ) {\n\n\t\t\tthis.$['authPop'].hide();\n\t\t\tthis.$['authPop'].destroy();\n\t\t}\n\n\t\tif( authResult && !authResult.error ) {\n\n\t\t\tif( enyo.isFunction( this.nextSteps.onSuccess ) ) {\n\n\t\t\t\tthis.nextSteps.onSuccess();\n\t\t\t}\n\t\t} else {\n\n\t\t\tvar struct = {\n\t\t\t\tname: \"authPop\",\n\t\t\t\tkind: \"onyx.Popup\",\n\n\t\t\t\tcentered: true,\n\t\t\t\tfloating: true,\n\t\t\t\tmodal: true,\n\t\t\t\tscrim: true,\n\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tcontent: \"Authenticate with Google\",\n\t\t\t\t\t\tclasses: \"margin-half-bottom bigger text-center\"\n\t\t\t\t\t}, {\n\t\t\t\t\t\tclasses: \"text-center\",\n\t\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkind: \"onyx.Button\",\n\t\t\t\t\t\t\t\tcontent: \"Cancel\",\n\t\t\t\t\t\t\t\tontap: \"handleAuthAbort\",\n\t\t\t\t\t\t\t\tclasses: \"onyx-negative\",\n\n\t\t\t\t\t\t\t\tstyle: \"margin-right: 15px;\"\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\tkind: \"onyx.Button\",\n\t\t\t\t\t\t\t\tcontent: \"Authenticate\",\n\t\t\t\t\t\t\t\tonclick: \"handleAuthClick\",\n\t\t\t\t\t\t\t\tclasses: \"onyx-affirmative\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tthis.createComponent( struct );\n\n\t\t\tthis.render();\n\n\t\t\tthis.$['authPop'].show();\n\n\t\t\tvar zIndex = this.$['authPop'].getComputedStyleValue( \"zIndex\" );\n\n\t\t\tif( !zIndex ) {\n\n\t\t\t\tvar css = this.$['authPop'].domCssText.split( \";\" );\n\n\t\t\t\tfor( var i = 0; i < css.length; i++ ) {\n\n\t\t\t\t\tif( css[i].match( \"z-index\" ) ) {\n\n\t\t\t\t\t\tcss = css[i].split( \":\" );\n\t\t\t\t\t\tzIndex = css[1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.$['authPop'].applyStyle( \"z-index\", ( ( zIndex - 5 ) + 10 ) );\n\n\t\t\tthis.$['authPop'].reflow();\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t * @function\n\t * @name GTS.Gapi#handleAuthAbort\n\t *\n\t * Exits auth attempt\n\t */\n\thandleAuthAbort: function() {\n\n\t\tthis.$['authPop'].hide();\n\n\t\tif( enyo.isFunction( this.nextSteps.onError ) ) {\n\n\t\t\tthis.nextSteps.onError();\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t * @function\n\t * @name GTS.Gapi#handleAuthClick\n\t *\n\t * Handler to start pop-up auth\n\t */\n\thandleAuthClick: function() {\n\n\t\tgapi.auth.authorize( { \"client_id\": this.clientId, \"scope\": this.scope.join( \" \" ), \"immediate\": false }, this._binds['_handleAuthResult'] );\n\t},\n\n\t/**\n\t * @public\n\t * @function\n\t * @name GTS.Gapi#loadModule\n\t *\n\t * Loads the specified module.\n\t *\n\t * @param {string} name\tname of the API\n\t * @param {integer} version\tversion of the API\n\t *\n\t * @param {object} [options]\tCallback functions\n\t * @param {function [options.onSuccess]\texecute once the details of the API have been loaded\n\t * @param {function} [options.onError]\texecutre if API is unable to load\n\t */\n\tloadModule: function( name, version, options ) {\n\n\t\tif( !this.isGapiReady() ) {\n\n\t\t\toptions.onError( { \"message\": \"Google API not ready yet.\" } );\n\n\t\t\treturn;\n\t\t}\n\n\t\tif( typeof( gapi.client[name] ) === \"undefined\" ) {\n\n\t\t\tgapi.client.load( name, ( \"v\" + version ), options.onSuccess );\n\t\t} else {\n\n\t\t\tif( enyo.isFunction( options.onSuccess ) ) {\n\n\t\t\t\toptions.onSuccess();\n\t\t\t}\n\t\t}\n\t}\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":15198}]],"length":15198}
