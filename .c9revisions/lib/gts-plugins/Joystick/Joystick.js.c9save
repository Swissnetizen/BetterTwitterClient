{"ts":1352568899288,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\nCopyright Â© 2012, GlitchTech Science\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n\tRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\tRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n * GTS.Joystick\n *\n * Digital joystick for touch interfaces.\n *\n * @author Matthew Schott <glitchtechscience@gmail.com>\n *\n * @requies Enyo (https://github.com/enyojs/enyo)\n * @requies EnyoJS Canvas (https://github.com/enyojs/canvas)\n *\n * @param {boolean}     [absolutelyPositioned]  Is the joystick inline or absolutely positioned (assumed)\n * @param {int}         [padHeight]             Height of joystick area *must be defined here, not in CSS*\n * @param {int}         [padWidth]              Width of joystick area *must be defined here, not in CSS*\n * @param {int}         [stickRadius]           Radius of joystick handle\n * @param {string}      [stickColor]            Color of joystick handle/current contact point\n * @param {string}      [baseColor]             Color of joystick base/initial contact point\n * @param {int}         [jitter]                Distance from center before joystick is in a 'digital' position\n * @param {string}      [debug]                 Color of debug message; disabled if blank\n *\n * @param {function}    [onStickMove]      Called when joystick is moved at all\n * @param {function}    [onStickUp]        Called when joystick enters up space\n * @param {function}    [onStickDown]      Called when joystick enters down space\n * @param {function}    [onStickLeft]      Called when joystick enters left space\n * @param {function}    [onStickRight]     Called when joystick enters right space\n * @param {function}    [onStickCentered]  Called when joystick is released\n */\nvar GTS_Joystick_Touch_List = [];\n\nenyo.kind({\n\tname: \"GTS.Joystick\",\n\tkind: \"enyo.Canvas\",\n\n\tclasses: \"gts-joystick\",\n\n\t/** @private variables */\n\tbaseX: 0,\n\tbaseY: 0,\n\n\tstickX: 0,\n\tstickY: 0,\n\n\ttop: 0,\n\tleft: 0,\n\theight: 0,\n\twidth: 0,\n\n\tpressed: false,\n\ttouchId: -1,\n\n\twasUp: false,\n\twasDown: false,\n\twasLeft: false,\n\twasRight: false,\n\twasPressed: false,\n\n\t/** @public variables */\n\tpublished: {\n\t\t//absolutely positioned\n\t\tabsolutelyPositioned: true,\n\n\t\t//area for joystick to appear in\n\t\tpadHeight: 300,\n\t\tpadWidth: 300,\n\n\t\t//initial display of joystick\n\t\tbaseColor: \"#272D70\",\n\n\t\t//current position of joystick\n\t\tstickRadius: 25,\n\t\tstickColor: \"#333333\",\n\n\t\tjitter: 12.5,\n\n\t\tdebug: \"\"\n\t},\n\n\t/** @public events */\n\tevents: {\n\t\tonStickMove: \"\",\n\n\t\tonStickUp: \"\",\n\t\tonStickDown: \"\",\n\t\tonStickLeft: \"\",\n\t\tonStickRight: \"\",\n\t\tonStickCentered: \"\"\n\t},\n\n\tcomponents:[\n\t\t{\n\t\t\tname: \"baseOuter\",\n\t\t\tkind: \"enyo.canvas.Circle\",\n\t\t\tbounds: {}\n\t\t}, {\n\t\t\tname: \"baseInner\",\n\t\t\tkind: \"enyo.canvas.Circle\",\n\t\t\tbounds: {}\n\t\t}, {\n\t\t\tname: \"stick\",\n\t\t\tkind: \"enyo.canvas.Circle\",\n\t\t\tbounds: {}\n\t\t}, {\n\t\t\tname:\"debug\",\n\t\t\tkind: \"canvas.Text\",\n\t\t\tbounds: {\n\t\t\t\tl: 0,\n\t\t\t\tt: 15\n\t\t\t},\n\t\t\tcolor: \"black\"\n\t\t}\n\t],\n\n\thandlers: {\n\t\tontouchstart: \"eventTouchStart\",\n\t\tontouchend: \"eventTouchEnd\",\n\t\tontouchmove: \"eventTouchMove\",\n\t\tonmousedown: \"eventMouseDown\",\n\t\tonmouseup: \"eventMouseUp\",\n\t\tonmousemove: \"eventMouseMove\"\n\t},\n\n\t/**\n\t * @protected\n\t * Called by system when rendered\n\t */\n\trendered: function() {\n\n\t\tthis.inherited( arguments );\n\n\t\tthis.padHeightChanged();\n\t\tthis.padWidthChanged();\n\n\t\tthis.absolutelyPositionedChanged();\n\n\t\tthis.stickRadiusChanged();\n\t\tthis.baseColorChanged();\n\t\tthis.stickColorChanged();\n\n\t\tthis.debugChanged();\n\t},\n\n\t/**\n\t * @protected\n\t * Called by system when this.padHeight is changed.\n\t * Adjusts height for Joystick area\n\t */\n\tpadHeightChanged: function() {\n\n\t\tthis.setAttribute( \"height\", this.padHeight );\n\t},\n\n\t/**\n\t * @protected\n\t * Called by system when this.padWidth is changed.\n\t * Adjusts width for Joystick area\n\t */\n\tpadWidthChanged: function() {\n\n\t\tthis.setAttribute( \"width\", this.padWidth );\n\t},\n\n\t/**\n\t * @protected\n\t * Called by system when this.absolutelyPositioned is changed.\n\t * Adjusts calculations for tap location\n\t */\n\tabsolutelyPositionedChanged: function() {\n\n\t\tthis.height = this.getAttribute( \"height\" );\n\t\tthis.width = this.getAttribute( \"width\" );\n\n\t\tif( this.absolutelyPositioned ) {\n\n\t\t\tvar top = left = 0;\n\n\t\t\tvar obj = this;\n\n\t\t\tdo {\n\n\t\t\t\tvar n = obj.node || obj.hasNode() || 0;\n\n\t\t\t\ttop += n.offsetTop;\n\t\t\t\tleft += n.offsetLeft;\n\n\t\t\t} while( obj = obj.parent );\n\n\t\t\tthis.top = top;\n\t\t\tthis.left = left;\n\t\t} else {\n\n\t\t\tvar bounds = this.getBounds();\n\n\t\t\tthis.top = bounds['top'];\n\t\t\tthis.left = bounds['left'];\n\t\t}\n\t},\n\n\t/**\n\t * @protected\n\t * Called by system when this.stickRadius is changed.\n\t * Adjusts radius of Joystick\n\t */\n\tstickRadiusChanged: function() {\n\n\t\tthis.$['stick']['bounds']['h'] = this.stickRadius;\n\t\tthis.$['stick']['bounds']['w'] = this.stickRadius;\n\n\t\tthis.$['baseOuter']['bounds']['h'] = this.stickRadius * 3 / 2;\n\t\tthis.$['baseOuter']['bounds']['w'] = this.stickRadius * 3 / 2;\n\n\t\tthis.$['baseInner']['bounds']['w'] = this.stickRadius * 3 / 4;\n\t\tthis.$['baseInner']['bounds']['h'] = this.stickRadius * 3 / 4;\n\n\t\tthis.draw();\n\t},\n\n\t/**\n\t * @protected\n\t * Called by system when this.baseColor is changed.\n\t * Adjusts color of joystick base\n\t */\n\tbaseColorChanged: function() {\n\n\t\tthis.$['baseOuter'].setColor( \"\" );\n\t\tthis.$['baseOuter'].setOutlineColor( this.baseColor );\n\n\t\tthis.$['baseInner'].setColor( this.baseColor );\n\t\tthis.$['baseInner'].setOutlineColor( \"\" );\n\n\t\tthis.draw();\n\t},\n\n\t/**\n\t * @protected\n\t * Called by system when this.stickColor is changed.\n\t * Adjusts color of joystick nob\n\t */\n\tstickColorChanged: function() {\n\n\t\tthis.$['stick'].setColor( this.stickColor );\n\n\t\tthis.draw();\n\t},\n\n\t/**\n\t * @protected\n\t * Called by system when this.debug is changed.\n\t * Adjusts color of debug string\n\t */\n\tdebugChanged: function() {\n\n\t\tthis.$['debug'].setColor( this.debug );\n\n\t\tthis.draw();\n\t},\n\n\t/**\n\t * @public\n\t * Test for touchscreen. Returns true is available\n\t *\n\t * @returns {boolean}\n\t */\n\ttouchscreenDevice: function() {\n\n\t\treturn( 'createTouch' in document ? true : false );\n\t},\n\n\t/**\n\t * @public\n\t * X position of joystick relative to base.\n\t *\n\t * @returns {int}\n\t */\n\tgetX: function() {\n\n\t\treturn( this.pressed ? ( this.stickX - this.baseX ) : 0 );\n\t},\n\n\t/**\n\t * @public\n\t * Y position of joystick relative to base.\n\t *\n\t * @returns {int}\n\t */\n\tgetY: function() {\n\n\t\treturn( this.pressed ? -( this.stickY - this.baseY ) : 0 );\n\t},\n\n\t/**\n\t * @public\n\t * Position of joystick relative to base.\n\t *\n\t * @returns {obj}\n\t * @returns {int}\tobj.x\n\t * @returns {int}\tobj.y\n\t */\n\tgetPosition: function() {\n\n\t\treturn {\n\t\t\t\t\"x\": this.getX(),\n\t\t\t\t\"y\": this.getY()\n\t\t\t};\n\t},\n\n\t/**\n\t * @public\n\t * Returns true if digital position of joystick is up\n\t *\n\t * @returns {boolean}\n\t */\n\tisUp: function() {\n\n\t\tif( !this.pressed ) {\n\n\t\t\treturn false;\n\t\t}\n\n\t\tvar x = this.getX();\n\t\tvar y = this.getY();\n\n\t\tif( y >= 0 ) {\n\t\t\t//Stick is in quadrant 3 or 4\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif( Math.abs( y ) < this.jitter || Math.abs( y ) < Math.abs( x ) ) {\n\t\t\t//Stick is within jitter range OR x change is larger\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * @public\n\t * Returns true if digital position of joystick is down\n\t *\n\t * @returns {boolean}\n\t */\n\tisDown: function() {\n\n\t\tif( !this.pressed ) {\n\n\t\t\treturn false;\n\t\t}\n\n\t\tvar x = this.getX();\n\t\tvar y = this.getY();\n\n\t\tif( y <= 0 ) {\n\t\t\t//Stick is in quadrant 1 or 2\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif( Math.abs( y ) < this.jitter || Math.abs( y ) < Math.abs( x ) ) {\n\t\t\t//Stick is within jitter range OR x change is larger\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * @public\n\t * Returns true if digital position of joystick is left\n\t *\n\t * @returns {boolean}\n\t */\n\tisLeft: function() {\n\n\t\tif( !this.pressed ) {\n\n\t\t\treturn false;\n\t\t}\n\n\t\tvar x = this.getX();\n\t\tvar y = this.getY();\n\n\t\tif( x >= 0 ) {\n\t\t\t//Stick is in quadrant 1 or 4\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif( Math.abs( x ) < this.jitter || Math.abs( x ) < Math.abs( y ) ) {\n\t\t\t//Stick is within jitter range OR y change is larger\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * @public\n\t * Returns true if digital position of joystick is right\n\t *\n\t * @returns {boolean}\n\t */\n\tisRight: function() {\n\n\t\tif( !this.pressed ) {\n\n\t\t\treturn false;\n\t\t}\n\n\t\tvar x = this.getX();\n\t\tvar y = this.getY();\n\n\t\tif( x <= 0 ) {\n\t\t\t//Stick is in quadrant 2 or 3\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif( Math.abs( x ) < this.jitter || Math.abs( x ) < Math.abs( y ) ) {\n\t\t\t//Stick is within jitter range OR y change is larger\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * @private\n\t * Mouse button held\n\t *\n\t * @param {object}\tinSender\tSource object\n\t * @param {object}\tinEvent\tMouse event object\n\t */\n\teventMouseDown: function( inSender, inEvent ) {\n\n\t\tvar x = 0;\n\t\tvar y = 0;\n\n\t\tif( inEvent.pageX || inEvent.pageY ) {\n\n\t\t\tx = inEvent.pageX;\n\t\t\ty = inEvent.pageY;\n\t\t} else if( inEvent.clientX || inEvent.clientY ) {\n\n\t\t\tposx = inEvent.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n\t\t\tposy = inEvent.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n\t\t}\n\n\t\tthis.touchDown( x, y );\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * @private\n\t * Touch event started\n\t *\n\t * @param {object}\tinSender\tSource object\n\t * @param {object}\tinEvent\tTouch event object\n\t */\n\teventTouchStart: function( inSender, inEvent ) {\n\n\t\tif( inEvent.changedTouches.length < 1 ) {\n\t\t\t//false positive\n\n\t\t\treturn;\n\t\t}\n\n\t\tfor( var i = 0; i < inEvent.changedTouches.length; i++ ) {\n\n\t\t\tif( this.touchId < 0 && enyo.indexOf( inEvent.changedTouches[i]['identifier'], GTS_Joystick_Touch_List ) < 0 ) {\n\t\t\t\t//fresh touch to joystick system\n\n\t\t\t\tthis.touchId = inEvent.changedTouches[i]['identifier'];\n\t\t\t\tGTS_Joystick_Touch_List.push( this.touchId );\n\n\t\t\t\tthis.touchDown( inEvent.changedTouches[i].pageX, inEvent.changedTouches[i].pageY );\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tinEvent.preventDefault();\n\t\treturn true;\n\t},\n\n\t/**\n\t * @private\n\t * Sets base and joystick positions for initial contact point\n\t */\n\ttouchDown: function( x, y ) {\n\n\t\tthis.pressed = true;\n\n\t\tthis.baseX = this.stickX = x;\n\t\tthis.baseY = this.stickY = y;\n\n\t\tthis.sendEvents();\n\t\tthis.draw();\n\t},\n\n\t/**\n\t * @private\n\t * Mouse moved\n\t *\n\t * @param {object}\tinSender\tSource object\n\t * @param {object}\tinEvent\tMouse event object\n\t */\n\teventMouseMove: function( inSender, inEvent ) {\n\n\t\tvar x = 0;\n\t\tvar y = 0;\n\n\t\tif( inEvent.pageX || inEvent.pageY ) {\n\n\t\t\tx = inEvent.pageX;\n\t\t\ty = inEvent.pageY;\n\t\t} else if( inEvent.clientX || inEvent.clientY ) {\n\n\t\t\tposx = inEvent.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n\t\t\tposy = inEvent.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n\t\t}\n\n\t\tthis.touchMoved( x, y );\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * @private\n\t * Touch point moved\n\t *\n\t * @param {object}\tinSender\tSource object\n\t * @param {object}\tinEvent\tTouch event object\n\t */\n\teventTouchMove: function( inSender, inEvent ) {\n\n\t\tif( inEvent.changedTouches.length < 1 ) {\n\t\t\t//false positive\n\n\t\t\treturn;\n\t\t}\n\n\t\tfor( var i = 0; i < inEvent.changedTouches.length; i++ ) {\n\n\t\t\tif( this.touchId === inEvent.changedTouches[i]['identifier'] ) {\n\t\t\t\t//Current touch, move\n\n\t\t\t\tthis.touchMoved( inEvent.changedTouches[i].pageX, inEvent.changedTouches[i].pageY );\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tinEvent.preventDefault();\n\t\treturn true;\n\t},\n\n\t/**\n\t * @private\n\t * Moves joystick position\n\t */\n\ttouchMoved: function( x, y ) {\n\n\t\tif( this.pressed ) {\n\n\t\t\tthis.stickX = x;\n\t\t\tthis.stickY = y;\n\n\t\t\tthis.sendEvents();\n\t\t\tthis.draw();\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t * Mouse button no longer held\n\t *\n\t * @param {object}\t[inSender]\tSource object\n\t * @param {object}\t[inEvent]\tMouse event object\n\t */\n\teventMouseUp: function( inSender, inEvent ) {\n\n\t\tthis.touchUp();\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * @private\n\t * Touch event ended\n\t *\n\t * @param {object}\t[inSender]\tSource object\n\t * @param {object}\t[inEvent]\tTouch event object\n\t */\n\teventTouchEnd: function( inSender, inEvent ) {\n\n\t\tif( inEvent.changedTouches.length < 1 ) {\n\t\t\t//false positive\n\n\t\t\treturn;\n\t\t}\n\n\t\tfor( var i = 0; i < inEvent.changedTouches.length; i++ ) {\n\n\t\t\tif( this.touchId === inEvent.changedTouches[i]['identifier'] ) {\n\t\t\t\t//Touch contact ended\n\n\t\t\t\tvar index = enyo.indexOf( this.touchId, GTS_Joystick_Touch_List );\n\n\t\t\t\tif( index >= 0 ) {\n\t\t\t\t\t//Remove identifier if found\n\n\t\t\t\t\tGTS_Joystick_Touch_List.splice( index, 1 );\n\t\t\t\t}\n\n\t\t\t\tthis.touchId = -1;\n\t\t\t\tthis.touchUp();\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tinEvent.preventDefault();\n\t\treturn true;\n\t},\n\n\t/**\n\t * @private\n\t * Resets joystick to home\n\t */\n\ttouchUp: function() {\n\n\t\tthis.pressed = false;\n\n\t\tthis.stickX = this.baseX = 0;\n\t\tthis.stickY = this.baseY = 0;\n\n\t\tthis.sendEvents();\n\t\tthis.draw();\n\t},\n\n\t/**\n\t * @private\n\t * Determines which events to send to owner\n\t */\n\tsendEvents: function() {\n\n\t\tvar outEvent = {\n\t\t\t\t\"pressed\": this.pressed,\n\n\t\t\t\t\"x\": this.getX(),\n\t\t\t\t\"y\": this.getY(),\n\n\t\t\t\t\"up\": this.isUp(),\n\t\t\t\t\"down\": this.isDown(),\n\t\t\t\t\"left\": this.isLeft(),\n\t\t\t\t\"right\": this.isRight()\n\t\t\t};\n\n\t\t/* Standard stick move event for every action */\n\n\t\tthis.doStickMove( outEvent );\n\n\t\t/* Digital events */\n\n\t\tif( !this.wasUp && outEvent['up'] ) {\n\n\t\t\tthis.wasUp = true;\n\n\t\t\tthis.doStickUp( outEvent );\n\t\t} else if( !outEvent['up'] ) {\n\n\t\t\tthis.wasUp = false;\n\t\t}\n\n\t\tif( !this.wasDown && outEvent['down'] ) {\n\n\t\t\tthis.wasDown = true;\n\n\t\t\tthis.doStickDown( outEvent );\n\t\t} else if( !outEvent['down'] ) {\n\n\t\t\tthis.wasDown = false;\n\t\t}\n\n\t\tif( !this.wasLeft && outEvent['left'] ) {\n\n\t\t\tthis.wasLeft = true;\n\n\t\t\tthis.doStickLeft( outEvent );\n\t\t} else if( !outEvent['left'] ) {\n\n\t\t\tthis.wasLeft = false;\n\t\t}\n\n\t\tif( !this.wasRight && outEvent['right'] ) {\n\n\t\t\tthis.wasRight = true;\n\n\t\t\tthis.doStickRight( outEvent );\n\t\t} else if( !outEvent['right'] ) {\n\n\t\t\tthis.wasRight = false;\n\t\t}\n\n\t\tif( this.wasPressed && !outEvent['pressed'] ) {\n\n\t\t\tthis.wasPressed = false;\n\n\t\t\tthis.doStickCentered( outEvent );\n\t\t} else if( outEvent['pressed'] ) {\n\n\t\t\tthis.wasPressed = true;\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t * Sets joystick and base positions on canvas. Sends to draw system.\n\t */\n\tdraw: function() {\n\n\t\tif( this.pressed ) {\n\n\t\t\tthis.$['stick']['bounds']['l'] = this.stickX - this.left;\n\t\t\tthis.$['stick']['bounds']['t'] = this.stickY - this.top;\n\n\t\t\tthis.$['baseOuter']['bounds']['l'] = this.baseX - this.left;\n\t\t\tthis.$['baseOuter']['bounds']['t'] = this.baseY - this.top;\n\n\t\t\tthis.$['baseInner']['bounds']['l'] = this.baseX - this.left;\n\t\t\tthis.$['baseInner']['bounds']['t'] = this.baseY - this.top;\n\t\t} else {\n\n\t\t\tthis.$['stick']['bounds']['l'] = -this.$['stick']['bounds']['w'];\n\t\t\tthis.$['stick']['bounds']['t'] = -this.$['stick']['bounds']['h'];\n\n\t\t\tthis.$['baseOuter']['bounds']['l'] = -this.$['baseOuter']['bounds']['w'];\n\t\t\tthis.$['baseOuter']['bounds']['t'] = -this.$['baseOuter']['bounds']['h'];\n\n\t\t\tthis.$['baseInner']['bounds']['l'] = -this.$['baseInner']['bounds']['w'];\n\t\t\tthis.$['baseInner']['bounds']['t'] = -this.$['baseInner']['bounds']['h'];\n\t\t}\n\n\t\tif( this.debug.length > 0 ) {\n\n\t\t\tthis.$['debug'].setText( \"X: \" + this.getX() + \" Y: \" + this.getY() + \" | \" + this.touchId + \" | \" + this.name );\n\t\t}\n\n\t\tthis.update();\n\t}\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":16096}]],"length":16096}
