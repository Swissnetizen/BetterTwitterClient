{"ts":1357126985571,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// machine for a loader instance\nenyo.machine = {\n\tsheet: function(inPath) {\n\t\tvar type = \"text/css\";\n\t\tvar rel = \"stylesheet\";\n\t\tvar isLess = (inPath.slice(-5) == \".less\");\n\t\tif (isLess) {\n\t\t\tif (window.less) {\n\t\t\t\t// If client-side less is loaded, insert the less stylesheet\n\t\t\t\ttype = \"text/less\";\n\t\t\t\trel = \"stylesheet/less\";\n\t\t\t} else {\n\t\t\t\t// Otherwise, we expect a css file of the same name to exist\n\t\t\t\tinPath = inPath.slice(0, inPath.length-4) + \"css\";\n\t\t\t}\n\t\t}\n\t\tvar link;\n\t\tif (enyo.runtimeLoading || isLess) {\n\t\t\tlink = document.createElement('link');\n\t\t\tlink.href = inPath;\n\t\t\tlink.media = \"screen\";\n\t\t\tlink.rel = rel;\n\t\t\tlink.type = type;\n\t\t\tdocument.getElementsByTagName('head')[0].appendChild(link);\n\t\t} else {\n\t\t\tdocument.write('<link href=\"' + inPath + '\" media=\"screen\" rel=\"' + rel + '\" type=\"' + type + '\" />');\n\t\t}\n\t\tif (isLess && window.less) {\n\t\t\tless.sheets.push(link);\n\t\t\tif (!enyo.loader.finishCallbacks.lessRefresh) {\n\t\t\t\tenyo.loader.finishCallbacks.lessRefresh = function() {\n\t\t\t\t\tless.refresh(true);\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t},\n\tscript: function(inSrc, onLoad, onError) {\n\t\tif (!enyo.runtimeLoading) {\n\t\t\tdocument.write('<scri' + 'pt src=\"' + inSrc + '\"' + (onLoad ? ' onload=\"' + onLoad + '\"' : '') + (onError ? ' onerror=\"' + onError + '\"' : '') + '></scri' + 'pt>');\n\t\t} else {\n\t\t\tvar script = document.createElement('script');\n\t\t\tscript.src = inSrc;\n\t\t\tscript.onLoad = onLoad;\n\t\t\tscript.onError = onError;\n\t\t\tdocument.getElementsByTagName('head')[0].appendChild(script);\n\t\t}\n\t},\n\tinject: function(inCode) {\n\t\tdocument.write('<script type=\"text/javascript\">' + inCode + \"</script>\");\n\t}\n};\n\n// create a dependency processor using our script machine\nenyo.loader = new enyo.loaderFactory(enyo.machine);\n\n// dependency API uses enyo loader\nenyo.depends = function() {\n\tvar ldr = enyo.loader;\n\tif (!ldr.packageFolder) {\n\t\tvar tag = enyo.locateScript(\"package.js\");\n\t\tif (tag && tag.path) {\n\t\t\tldr.aliasPackage(tag.path);\n\t\t\tldr.packageFolder = tag.path + \"/\";\n\t\t\t//console.log(\"detected PACKAGEFOLDER [\" + ldr.packageFolder + \"]\");\n\t\t}\n\t}\n\tldr.load.apply(ldr, arguments);\n};\n\n// Runtime loader\n// Usage: enyo.load(depends, [onLoadCallback])\n//  where - depends is string or array of string paths to package.js, script, or css to load\n//        - doneCallback is fired after file or package loading has completed\n// Only one file/package is loaded at a time; additional calls are queued and loading deferred\n(function() {\n\tvar enyo = window.enyo;\n\tvar runtimeLoadQueue = [];\n\tenyo.load = function(depends, onLoadCallback) {\n\t\truntimeLoadQueue.push(arguments);\n\t\tif (!enyo.runtimeLoading) {\n\t\t\tenyo.runtimeLoading = true;\n\t\t\truntimeLoad();\n\t\t}\n\t};\n\tfunction runtimeLoad(onLoad) {\n\t\tif (onLoad) {\n\t\t\tonLoad(); // Run user callback function\n\t\t}\n\t\tif (runtimeLoadQueue.length) {\n\t\t\tvar args = runtimeLoadQueue.shift();\n\t\t\tvar depends = args[0];\n\t\t\tvar dependsArg = enyo.isArray(depends) ? depends : [depends];\n\t\t\tvar onLoadCallback = args[1];\n\t\t\tenyo.loader.finishCallbacks.runtimeLoader = function() {\n\t\t\t\t// Once loader is done loading a package, we chain a call to runtimeLoad(),\n\t\t\t\t// which will call the onLoadCallback from the original load call, passing\n\t\t\t\t// a reference to the depends argument from the original call for tracking,\n\t\t\t\t// followed by kicking off any additionally queued load() calls\n\t\t\t\truntimeLoad(function() {\n\t\t\t\t\tonLoadCallback && onLoadCallback(depends);\n\t\t\t\t});\n\t\t\t};\n\t\t\tenyo.loader.packageFolder = \"./\";\n\t\t\t// Kick off next queued call to loader\n\t\t\tenyo.depends.apply(this, dependsArg);\n\t\t} else {\n\t\t\tenyo.runtimeLoading = false;\n\t\t\tenyo.loader.packageFolder = \"\";\n\t\t}\n\t}\n})();\n\n// predefined path aliases\nenyo.path.addPaths({\n\tenyo: enyo.args.root,\n\tlib: \"$enyo/../lib\"\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":3725}]],"length":3725}
