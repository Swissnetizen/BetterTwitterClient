{"ts":1357296525728,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//Copyright (c) 2012 Samarth AGARWAL \n//Permission is hereby granted, free of charge, \n//to any person obtaining a copy of this software and associated documentation files (the \"Software\"), \n//to deal in the Software without restriction, \n//including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, \n//and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n//THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, \n//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \n//IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n//DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, \n//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//Loads Modules\nvar Types = require(\"./Types\");\n\n//Gets the mime type from an extension\nvar GetMimeType = function(Extension) {\n    return Types.Mime[Extension];\n};\n//Gets the extension of the file; only the last one, for example if you did: GetExtension(\"Spam.tar.gz\") you would get \".gz\" not \"tar.gz\"\nvar GetExtension = function(FileName) {\n    return FileName.substring(FileName.lastIndexOf(\".\")+1, FileName.length);\n};\n\n\n//Gets the encoding from the extension; Converts extension then retrives encoding from object\nvar GetEncodingFromExtension = function(Extension) {\n    return Types.Encoding[GetMimeType(Extension)];\n};\n    \n    \n\n//Gets encoding from the MIME/type\nvar GetEncodingFromMimeType = function(MimeType) {\n    return Types.Encoding[MimeType];\n};\n//Exports functions\nvar Tools = new Object();\nTools.GetMimeType = GetMimeType;\nTools.GetEncodingFromMimeType = GetEncodingFromMimeType;\nTools.GetEncodingFromExtension = GetEncodingFromExtension;\nTools.GetExtension = GetExtension;\n\n\n//Copyright (c) 2012 Samarth AGARWAL \n//Permission is hereby granted, free of charge, \n//to any person obtaining a copy of this software and associated documentation files (the \"Software\"), \n//to deal in the Software without restriction, \n//including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, \n//and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n//THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, \n//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \n//IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n//DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, \n//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//Loading modules\n\nvar fs = require(\"fs\");\nvar url = require(\"url\");\n\n\n\n//Defining variables\nvar content = \"\";\nvar code = 500;\nvar MimeType;\nvar Encoding;\nvar PathName;\n//What a log should look like\nvar ToLog = {\n    \"RecivedAt\": 0,\n    \"Sender\": \"\",\n    \"ItemRequested\": {\"Name\": \"\", \"MimeType\": \"\", \"Extension\": \"\", \"OriginalRequest\": \"\", \"Encoding\": \"\"},\n    \"Response\": {\"MimeType\": \"\", \"code\": 0, \"SentAt\": 0,},\n\n    \"Errors\": []\n};\nvar RecivedAt = 0;\nvar SentAt = 0;\n//function to handle most to all web requests\nvar HandleRequest = function(request, response) {\n    RecivedAt = Date.now() / 1000;\n    //Gets request\n    ToLog = { \"RecivedAt\": 0, \"Sender\": \"\", \"ItemRequested\": {\"Name\": \"\", \"MimeType\": \"\", \"Extension\": \"\", \"OriginalRequest\": \"\", \"Encoding\": \"\"}, \"Response\": {\"MimeType\": \"\", \"code\": 0, \"SentAt\": 0,}, \"Errors\": []};\n    ToLog.RecivedAt = RecivedAt;\n    ToLog.Sender = request.connection.from;\n    PathName = url.parse(request.url).pathname;\n    ToLog.ItemRequested.OriginalRequest = PathName;\n    //Corrects Request\n//    PathName = PathName.charAt(0) === \"/\" && PathName.length === 1 ? \"Server/index.html\" : PathName;\n//    PathName = PathName.charAt(0) === \"/\" ? PathName.substring(1, PathName.length) : PathName;\n    ToLog.ItemRequested.Name = PathName;\n    //Process the FileNames and gets the mime type    \n    MimeType = Tools.GetMimeType(Tools.GetExtension(PathName));\n    ToLog.ItemRequested.MimeType = MimeType;\n    Encoding = Tools.GetEncodingFromMimeType(MimeType);\n    ToLog.ItemRequested.Encoding = Encoding;\n\n   //Reads the file\n\n    fs.readFile(PathName, Encoding, function(error, file) {\n    \n        if (error) {\n            code = 500;\n            content = code + \" \" + error;\n            console.log(error);\n            ToLog.Errors.push(error);\n            MimeType = \"text/plain\";\n            Encoding = \"utf8\";\n            if (error.errno === 34) {\n                code = 404;\n                content = code + \" \" + error;\n                console.log(error);\n                ToLog.Errors.push(error);\n                MimeType = \"text/plain\";\n                Encoding = \"utf8\";\n            } else {\n                code = 500;\n                content = code + \" \" + error;\n                console.log(error);\n                ToLog.Errors.push(error);\n                MimeType = \"text/plain\";\n                Encoding = \"utf8\";\n            }\n        \n        } else if (file) {\n            content = file;\n            code = 200;\n            \n        }\n   \n\n        response.writeHead(code, {\"Content-Type\": MimeType });\n        response.write(content, Encoding);\n        response.end();\n        SentAt = Date.now() / 1000;\n        \n        \n        \n    });\n    ToLog.Response.MimeType = MimeType;\n    ToLog.Response.code = code;\n    ToLog.Response.SentAt = SentAt;\n    console.log(ToLog);\n};\n\n\nexports.HandleRequest = HandleRequest;\n\n"]],"start1":0,"start2":0,"length1":0,"length2":6063}]],"length":6063}
{"contributors":[],"silentsave":true,"ts":1357296576872,"patch":[[{"diffs":[[-1,"//Copyright (c) 2012 Samarth AGARWAL \n//Permission is hereby granted, free of charge, \n//to any person obtaining a copy of this software and associated documentation files (the \"Software\"), \n//to deal in the Software without restriction, \n//including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, \n//and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n//THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, \n//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \n//IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n//DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, \n//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//Loads Modules\nvar Types = require(\"./Types\");"],[1,"var Mime = {\n    \"html\": \"text/html\",\n    \"js\": \"application/javascript\",\n    \"css\": \"text/css\",\n    \"png\": \"image/png\",\n    \"ico\": \"image/ico\",\n    \"gif\": \"image/gif\",\n};\n\n\nvar Encoding = {\n    \"text/html\": \"utf8\",\n    \"application/javascript\": \"utf8\", \n    \"text/css\": \"utf8\",\n    \"image/png\": \"binary\",\n    \"image/gif\": \"binary\",\n    \"image/ico\": \"binary\",\n};\nexports.Mime = Mime;\nexports.Encoding = Encoding;\n"],[0,"\n\n//"]],"start1":0,"start2":0,"length1":1144,"length2":417}]],"length":5336,"saved":false}
{"ts":1357296580050,"patch":[[{"diffs":[[0,"ry\",\n};\n"],[1,"va\n"],[0,"exports."]],"start1":355,"start2":355,"length1":16,"length2":19}]],"length":5339,"saved":false}
{"ts":1357296582861,"patch":[[{"diffs":[[0,"\",\n};\nva"],[1,"r Types = "],[0,"\nexports"]],"start1":357,"start2":357,"length1":16,"length2":26}]],"length":5349,"saved":false}
{"ts":1357296584356,"patch":[[{"diffs":[[0,"Types = "],[1,"new Ob"],[0,"\nexports"]],"start1":367,"start2":367,"length1":16,"length2":22}]],"length":5355,"saved":false}
{"ts":1357296586143,"patch":[[{"diffs":[[0,"= new Ob"],[1,"ject()"],[0,"\nexports"]],"start1":373,"start2":373,"length1":16,"length2":22}]],"length":5361,"saved":false}
{"ts":1357296586773,"patch":[[{"diffs":[[0,"Object()"],[1,";"],[0,"\nexports"]],"start1":379,"start2":379,"length1":16,"length2":17}]],"length":5362,"saved":false}
{"ts":1357296591607,"patch":[[{"diffs":[[0,"ject();\n"],[-1,"exports"],[1,"\n"],[0,".Mime = "]],"start1":381,"start2":381,"length1":23,"length2":17}]],"length":5356,"saved":false}
{"ts":1357296592876,"patch":[[{"diffs":[[0,"ect();\n\n"],[1,"Typ"],[0,".Mime = "]],"start1":382,"start2":382,"length1":16,"length2":19}]],"length":5359,"saved":false}
{"ts":1357296594219,"patch":[[{"diffs":[[0,"();\n\nTyp"],[1,"es"],[0,".Mime = "]],"start1":385,"start2":385,"length1":16,"length2":18}]],"length":5361,"saved":false}
{"ts":1357296597625,"patch":[[{"diffs":[[0,"= Mime;\n"],[-1,"export"],[1,"T"],[0,"s.Encodi"]],"start1":401,"start2":401,"length1":22,"length2":17}]],"length":5356,"saved":false}
{"ts":1357296599019,"patch":[[{"diffs":[[0," Mime;\nT"],[1,"ype"],[0,"s.Encodi"]],"start1":402,"start2":402,"length1":16,"length2":19}]],"length":5359,"saved":false}
{"ts":1357296711045,"patch":[[{"diffs":[[0,"coding;\n"],[1,"    if"],[0,"\n   //Re"]],"start1":4016,"start2":4016,"length1":16,"length2":22}]],"length":5365,"saved":false}
{"ts":1357296712028,"patch":[[{"diffs":[[0,";\n    if"],[1," "],[0,"\n   //Re"]],"start1":4022,"start2":4022,"length1":16,"length2":17}]],"length":5366,"saved":false}
{"ts":1357296724680,"patch":[[{"diffs":[[0,"\n    if "],[1,"()"],[0,"\n   //Re"]],"start1":4023,"start2":4023,"length1":16,"length2":18}]],"length":5368,"saved":false}
{"ts":1357296726389,"patch":[[{"diffs":[[0,"    if ("],[1,"Path"],[0,")\n   //R"]],"start1":4024,"start2":4024,"length1":16,"length2":20}]],"length":5372,"saved":false}
{"ts":1357296730054,"patch":[[{"diffs":[[0,"if (Path"],[1,"Name"],[0,")\n   //R"]],"start1":4028,"start2":4028,"length1":16,"length2":20}]],"length":5376,"saved":false}
{"ts":1357296731673,"patch":[[{"diffs":[[0,"PathName"],[1," =="],[0,")\n   //R"]],"start1":4032,"start2":4032,"length1":16,"length2":19}]],"length":5379,"saved":false}
{"ts":1357296732869,"patch":[[{"diffs":[[0,"hName =="],[1,"= "],[0,")\n   //R"]],"start1":4035,"start2":4035,"length1":16,"length2":18}]],"length":5381,"saved":false}
{"ts":1357296734150,"patch":[[{"diffs":[[0,"ame === "],[1,"''"],[0,")\n   //R"]],"start1":4037,"start2":4037,"length1":16,"length2":18}]],"length":5383,"saved":false}
{"ts":1357296745007,"patch":[[{"diffs":[[0,"me === '"],[1,"/socket.io/socket.io.js"],[0,"')\n   //"]],"start1":4038,"start2":4038,"length1":16,"length2":39}]],"length":5406,"saved":false}
{"ts":1357296746429,"patch":[[{"diffs":[[0,".io.js')"],[1," "],[0,"\n   //Re"]],"start1":4063,"start2":4063,"length1":16,"length2":17}]],"length":5407,"saved":false}
{"ts":1357296747690,"patch":[[{"diffs":[[0,"io.js') "],[1,"{\n        \n    }"],[0,"\n   //Re"]],"start1":4064,"start2":4064,"length1":16,"length2":32}]],"length":5423,"saved":false}
{"ts":1357296749677,"patch":[[{"diffs":[[0,"      \n    }"],[1,";"],[0,"\n   //Reads "]],"start1":4076,"start2":4076,"length1":24,"length2":25}]],"length":5424,"saved":false}
{"ts":1357296751770,"patch":[[{"diffs":[[0,"s') {\n      "],[-1,"  "],[0,"\n    };\n   /"]],"start1":4068,"start2":4068,"length1":26,"length2":24}]],"length":5422,"saved":false}
{"ts":1357296753836,"patch":[[{"diffs":[[0,"s') {\n      "],[1,"    "],[0,"\n    };\n   /"]],"start1":4068,"start2":4068,"length1":24,"length2":28}]],"length":5426,"saved":false}
{"ts":1357296760146,"patch":[[{"diffs":[[0,") {\n        "],[1,"void()"],[0,"  \n    };\n  "]],"start1":4070,"start2":4070,"length1":24,"length2":30}]],"length":5432,"saved":false}
{"ts":1357296760770,"patch":[[{"diffs":[[0,"   void("],[1,"0"],[0,")  \n    "]],"start1":4079,"start2":4079,"length1":16,"length2":17}]],"length":5433,"saved":false}
{"ts":1357296763003,"patch":[[{"diffs":[[0," void(0)"],[1,";"],[0,"  \n    }"]],"start1":4081,"start2":4081,"length1":16,"length2":17}]],"length":5434,"saved":false}
{"ts":1357296765973,"patch":[[{"diffs":[[0,"  \n    }"],[-1,";"],[0,"\n   //Re"]],"start1":4090,"start2":4090,"length1":17,"length2":16}]],"length":5433,"saved":false}
{"contributors":[],"silentsave":true,"restoring":1357296599019,"ts":1357424414181,"patch":[[{"diffs":[[0,"ng;\n"],[-1,"    if (PathName === '/socket.io/socket.io.js') {\n        void(0);  \n    }"],[0,"\n   "]],"start1":4020,"start2":4020,"length1":82,"length2":8}]],"length":5359,"saved":false}
{"ts":1357424697358,"patch":[[{"diffs":[[0,"Request\n"],[-1,"//"],[0,"    Path"]],"start1":3510,"start2":3510,"length1":18,"length2":16}]],"length":5357,"saved":false}
{"ts":1357424702384,"patch":[[{"diffs":[[0,"thName;\n"],[-1,"//"],[0,"    Path"]],"start1":3611,"start2":3611,"length1":18,"length2":16}]],"length":5355,"saved":false}
{"ts":1357424706910,"patch":[[{"diffs":[[0," ? \""],[-1,"Server"],[1,"Client"],[0,"/ind"]],"start1":3584,"start2":3584,"length1":14,"length2":14}]],"length":5355,"saved":false}
{"ts":1357424713646,"patch":[[{"diffs":[[0,"ent/"],[-1,"index"],[1,"debug"],[0,".htm"]],"start1":3591,"start2":3591,"length1":13,"length2":13}]],"length":5355,"saved":false}
